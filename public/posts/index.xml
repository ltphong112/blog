<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on subzero</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on subzero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Mar 2025 08:19:18 -0700</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Wordpress Multisites</title>
      <link>http://localhost:1313/posts/2025/wordpress-multisites/</link>
      <pubDate>Wed, 19 Mar 2025 08:19:18 -0700</pubDate>
      <guid>http://localhost:1313/posts/2025/wordpress-multisites/</guid>
      <description>&lt;p&gt;Enabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Hereâ€™s how you can set it up:&lt;/p&gt;
&lt;p&gt;Backup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.&lt;/p&gt;
&lt;p&gt;Edit wp-config.php:&lt;/p&gt;
&lt;p&gt;Open your wp-config.php file.
Add the following line above the /* That&amp;rsquo;s all, stop editing! Happy publishing. */ line:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;define(&amp;#39;WP_ALLOW_MULTISITE&amp;#39;, true);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Access Network Setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Log in to your WordPress dashboard.&lt;/li&gt;
&lt;li&gt;Go to Tools &amp;gt; Network Setup.&lt;/li&gt;
&lt;li&gt;Choose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1).&lt;/li&gt;
&lt;li&gt;Click Install.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Update wp-config.php and .htaccess:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reset Wordpress Password</title>
      <link>http://localhost:1313/posts/2025/reset-wordpress-password/</link>
      <pubDate>Tue, 18 Mar 2025 15:49:25 -0700</pubDate>
      <guid>http://localhost:1313/posts/2025/reset-wordpress-password/</guid>
      <description>&lt;p&gt;You can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:&lt;/p&gt;
&lt;p&gt;Access your Docker container:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker exec -it &amp;lt;container_name&amp;gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Navigate to your WordPress directory:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /var/www/html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;List the users:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wp user list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Update the password for the desired user:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;wp user update &amp;lt;user_id&amp;gt; --user_pass=&amp;lt;new_password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Exit the container:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In case there is an error like &lt;code&gt;wp command not found&lt;/code&gt;, WP-CLI isn&amp;rsquo;t installed in your Docker container. Let&amp;rsquo;s install it:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Website With Hugo and Cloudflare</title>
      <link>http://localhost:1313/posts/2025/static-website-with-hugo-and-cloudflare/</link>
      <pubDate>Mon, 17 Mar 2025 15:48:13 -0700</pubDate>
      <guid>http://localhost:1313/posts/2025/static-website-with-hugo-and-cloudflare/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages of Hosting on Cloudflare&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance: Cloudflare&amp;rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world.&lt;/li&gt;
&lt;li&gt;Security: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates.&lt;/li&gt;
&lt;li&gt;Reliability: Cloudflare&amp;rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why Static Websites are Better than Dynamic&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Install Wordpress With Docker</title>
      <link>http://localhost:1313/install-wordpress-with-docker/</link>
      <pubDate>Mon, 17 Mar 2025 13:27:19 -0700</pubDate>
      <guid>http://localhost:1313/install-wordpress-with-docker/</guid>
      <description>&lt;p&gt;Here are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.&lt;/p&gt;
&lt;p&gt;Step 1: Create a Directory for Your Project&lt;/p&gt;
&lt;p&gt;Open a terminal and create a directory for your WordPress project:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mkdir wordpress-docker
cd wordpress-docker
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 2: Create a docker-compose.yml file&lt;/p&gt;
&lt;p&gt;Create a docker-compose.yml file in the wordpress-docker directory with the following content:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;version: &amp;#39;3.8&amp;#39;  # Specifies the Docker Compose file format version

services:
  wordpress:
    image: wordpress:latest
    container_name: wordpress
    ports:
      - &amp;#34;8000:80&amp;#34;
    volumes:
      - ./html:/var/www/html
      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
    restart: unless-stopped

  db:
    image: mariadb:latest
    container_name: wordpress_db
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    restart: unless-stopped

volumes:
  db_data:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Step 3: Create the uploads.ini File&lt;/p&gt;</description>
    </item>
    <item>
      <title>Install Cloudflare Zero Trust With Docker</title>
      <link>http://localhost:1313/install-cloudflare-zero-trust-with-docker/</link>
      <pubDate>Tue, 23 May 2023 09:42:15 -0700</pubDate>
      <guid>http://localhost:1313/install-cloudflare-zero-trust-with-docker/</guid>
      <description>&lt;p&gt;Introduction:
Cloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare&amp;rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;http://localhost:1313/images/cloudflare-zero-trust.webp&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;Step 1: Log in to Cloudflare and Create a Tunnel Configuration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open a web browser and navigate to the Cloudflare website.&lt;/li&gt;
&lt;li&gt;Log in to your Cloudflare account.&lt;/li&gt;
&lt;li&gt;Go to the &amp;ldquo;Zero Trust&amp;rdquo; section in the Cloudflare dashboard.&lt;/li&gt;
&lt;li&gt;Click on &amp;ldquo;Tunnels&amp;rdquo; and then &amp;ldquo;Create Tunnel Configuration.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Provide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements.&lt;/li&gt;
&lt;li&gt;Save the configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Step 2: Start the Tunnel Container with Docker&lt;/p&gt;</description>
    </item>
    <item>
      <title>Install Jellyfin With Docker Compose</title>
      <link>http://localhost:1313/posts/2024/install-jellyfin-with-docker-compose/</link>
      <pubDate>Fri, 16 Dec 2022 10:11:22 -0800</pubDate>
      <guid>http://localhost:1313/posts/2024/install-jellyfin-with-docker-compose/</guid>
      <description>&lt;p&gt;To install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don&amp;rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.&lt;/p&gt;
&lt;p&gt;Once you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:&lt;/p&gt;
&lt;p&gt;Create a new directory for your Jellyfin installation, and navigate to that directory in your terminal.
Create a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Install Windows Update From Powershell</title>
      <link>http://localhost:1313/posts/2024/install-windows-update-from-powershell/</link>
      <pubDate>Thu, 15 Dec 2022 08:12:43 -0800</pubDate>
      <guid>http://localhost:1313/posts/2024/install-windows-update-from-powershell/</guid>
      <description>&lt;p&gt;This guide will show how to install Windows updates from Powershell.
Make sure the Execution Policies are allowed with this command&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called &amp;ldquo;PSWindowsUpdate&amp;rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.&lt;/p&gt;
&lt;p&gt;To use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
