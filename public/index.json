[{"content":"Enabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Here’s how you can set it up:\nBackup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.\nEdit wp-config.php:\nOpen your wp-config.php file. Add the following line above the /* That\u0026rsquo;s all, stop editing! Happy publishing. */ line:\ndefine(\u0026#39;WP_ALLOW_MULTISITE\u0026#39;, true); Access Network Setup:\nLog in to your WordPress dashboard. Go to Tools \u0026gt; Network Setup. Choose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1). Click Install. Update wp-config.php and .htaccess:\nWordPress will provide some code to add to your wp-config.php and .htaccess files. Follow the instructions provided. Add the provided code to your wp-config.php file:\ndefine(\u0026#39;MULTISITE\u0026#39;, true); define(\u0026#39;SUBDOMAIN_INSTALL\u0026#39;, false); // Set to true if using subdomains define(\u0026#39;DOMAIN_CURRENT_SITE\u0026#39;, \u0026#39;example.com\u0026#39;); define(\u0026#39;PATH_CURRENT_SITE\u0026#39;, \u0026#39;/\u0026#39;); define(\u0026#39;SITE_ID_CURRENT_SITE\u0026#39;, 1); define(\u0026#39;BLOG_ID_CURRENT_SITE\u0026#39;, 1); Update your .htaccess file with the provided rewrite rules.\nRewriteEngine On RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteBase / RewriteRule ^index\\.php$ - [L] # add a trailing slash to /wp-admin RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L] RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^ - [L] RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L] RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\\.php)$ $2 [L] RewriteRule . index.php [L] Log out and log back in to your WordPress dashboard. $$Network Admin Settings:$$\nYou’ll now see a new My Sites menu in the admin bar. Go to My Sites \u0026gt; Network Admin \u0026gt; Dashboard to manage your network settings.\n$$Configure Network Settings:$$\nFrom the Network Admin dashboard, you can add new sites, install themes and plugins, and manage your network settings.\n","permalink":"http://localhost:1313/posts/2025/wordpress-multisites/","summary":"\u003cp\u003eEnabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Here’s how you can set it up:\u003c/p\u003e\n\u003cp\u003eBackup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.\u003c/p\u003e\n\u003cp\u003eEdit wp-config.php:\u003c/p\u003e\n\u003cp\u003eOpen your wp-config.php file.\nAdd the following line above the /* That\u0026rsquo;s all, stop editing! Happy publishing. */ line:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edefine(\u0026#39;WP_ALLOW_MULTISITE\u0026#39;, true);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eAccess Network Setup:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLog in to your WordPress dashboard.\u003c/li\u003e\n\u003cli\u003eGo to Tools \u0026gt; Network Setup.\u003c/li\u003e\n\u003cli\u003eChoose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1).\u003c/li\u003e\n\u003cli\u003eClick Install.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUpdate wp-config.php and .htaccess:\u003c/p\u003e","title":"Wordpress Multisites"},{"content":"You can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:\nAccess your Docker container:\ndocker exec -it \u0026lt;container_name\u0026gt; bash Navigate to your WordPress directory:\ncd /var/www/html List the users:\nwp user list Update the password for the desired user:\nwp user update \u0026lt;user_id\u0026gt; --user_pass=\u0026lt;new_password\u0026gt; Exit the container:\nexit In case there is an error like wp command not found, WP-CLI isn\u0026rsquo;t installed in your Docker container. Let\u0026rsquo;s install it:\nDownload WP-CLI:\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar Make the file executable:\nchmod +x wp-cli.phar Move it to a directory in your PATH:\nsudo mv wp-cli.phar /usr/local/bin/wp Verify the installation:\nwp --info If you prefer to use Docker Compose, you can add WP-CLI to your docker-compose.yml file:\nversion: \u0026#39;3.8\u0026#39; services: wordpress: image: wordpress:latest ports: - \u0026#34;8000:80\u0026#34; environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: exampleuser WORDPRESS_DB_PASSWORD: examplepass WORDPRESS_DB_NAME: exampledb db: image: mysql:5.7 environment: MYSQL_ROOT_PASSWORD: examplepass MYSQL_DATABASE: exampledb MYSQL_USER: exampleuser MYSQL_PASSWORD: examplepass wpcli: image: wordpress:cli volumes: - .:/var/www/html depends_on: - wordpress After updating your docker-compose.yml, you can run WP-CLI commands like this:\ndocker-compose run --rm wpcli wp \u0026lt;command\u0026gt; This should help you get WP-CLI up and running in your Docker environment.\n","permalink":"http://localhost:1313/posts/2025/reset-wordpress-password/","summary":"\u003cp\u003eYou can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:\u003c/p\u003e\n\u003cp\u003eAccess your Docker container:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edocker exec -it \u0026lt;container_name\u0026gt; bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNavigate to your WordPress directory:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd /var/www/html\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eList the users:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewp user list\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUpdate the password for the desired user:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewp user update \u0026lt;user_id\u0026gt; --user_pass=\u0026lt;new_password\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eExit the container:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexit\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn case there is an error like \u003ccode\u003ewp command not found\u003c/code\u003e, WP-CLI isn\u0026rsquo;t installed in your Docker container. Let\u0026rsquo;s install it:\u003c/p\u003e","title":"Reset Wordpress Password"},{"content":"Here\u0026rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.\nAdvantages of Hosting on Cloudflare\nPerformance: Cloudflare\u0026rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world. Security: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates. Reliability: Cloudflare\u0026rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down. Why Static Websites are Better than Dynamic\nSpeed: Static websites load faster because they serve pre-built HTML files, unlike dynamic websites that generate content on the fly. Security: Static sites are less vulnerable to attacks since they don\u0026rsquo;t rely on server-side processing. Cost-Effective: Hosting static sites is generally cheaper as they require less server resources. Introduction to Hugo\nHugo is a fast and flexible static site generator written in Go. It allows you to create static websites quickly and efficiently, using Markdown for content and a variety of themes for design.\nStep-by-Step Guide Install Hugo\nWindows: Use Chocolatey: choco install hugo-extended macOS: Use Homebrew: brew install hugo Linux: Use your package manager, e.g., sudo apt-get install hugo for Ubuntu. Set Up Git and Sync Content Install Git:\nWindows: Download and install from Git for Windows. macOS: Install via Homebrew: brew install git. Linux: Use your package manager, e.g., sudo apt-get install git for Ubuntu. Configure Git:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; Initialize a Git Repository:\ncd your-hugo-site git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git remote add origin https://github.com/yourusername/your-repo.git git push -u origin master Set Up Cloudflare to Work with Hugo Create a Cloudflare Account: Sign up at Cloudflare.\nAdd Your Site to Cloudflare:\nGo to the Cloudflare dashboard and add your site. Update your domain\u0026rsquo;s nameservers to point to Cloudflare\u0026rsquo;s nameservers. Deploy Hugo Site to Cloudflare Pages:\nGo to the Pages section in Cloudflare. Click \u0026ldquo;Create a project\u0026rdquo; and connect your GitHub repository. Configure the build settings: set the build command to hugo and the output directory to public. Use a Custom Domain Add Custom Domain in Cloudflare:\nIn the Cloudflare Pages dashboard, go to your project settings and add your custom domain. Update your DNS settings to point your custom domain to the Cloudflare Pages domain. Configure SSL/TLS:\nCloudflare provides SSL/TLS encryption by default. You can configure SSL settings in the Cloudflare dashboard under the SSL/TLS tab. Conclusion\nBy following these steps, you\u0026rsquo;ll have a fast, secure, and reliable static website hosted on Cloudflare using Hugo. This setup leverages the advantages of static sites and Cloudflare\u0026rsquo;s robust features to ensure optimal performance and security.\n","permalink":"http://localhost:1313/posts/2025/static-website-with-hugo-and-cloudflare/","summary":"\u003cp\u003eHere\u0026rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages of Hosting on Cloudflare\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePerformance: Cloudflare\u0026rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world.\u003c/li\u003e\n\u003cli\u003eSecurity: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates.\u003c/li\u003e\n\u003cli\u003eReliability: Cloudflare\u0026rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWhy Static Websites are Better than Dynamic\u003c/strong\u003e\u003c/p\u003e","title":"Static Website With Hugo and Cloudflare"},{"content":"Here are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.\nStep 1: Create a Directory for Your Project\nOpen a terminal and create a directory for your WordPress project:\nmkdir wordpress-docker cd wordpress-docker Step 2: Create a docker-compose.yml file\nCreate a docker-compose.yml file in the wordpress-docker directory with the following content:\nversion: \u0026#39;3.8\u0026#39; # Specifies the Docker Compose file format version services: wordpress: image: wordpress:latest container_name: wordpress ports: - \u0026#34;8000:80\u0026#34; volumes: - ./html:/var/www/html - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress restart: unless-stopped db: image: mariadb:latest container_name: wordpress_db volumes: - db_data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress restart: unless-stopped volumes: db_data: Step 3: Create the uploads.ini File\nCreate an uploads.ini file in the wordpress-docker directory with the following content:\nfile_uploads = On memory_limit = 64M upload_max_filesize = 64M post_max_size = 64M max_execution_time = 600 Step 4: Start the Docker Containers\nRun the following command to start the Docker containers:\ndocker-compose up -d Step 5: Access Your WordPress Site\nOpen your web browser and navigate to http://localhost:8000 to complete the WordPress installation.\nStep 6: Backup Your Files\nEnsure that your WordPress files are backed up by mapping the ./html directory to /var/www/html in the Docker container. This way, all your WordPress files will be stored in the html directory on your host machine.\nExplanation of version: \u0026lsquo;3.8\u0026rsquo;\nCompatibility: Version 3.8 is compatible with Docker Engine 19.03.0 and above. Features: It includes features like support for secrets, configs, and improved networking options. You can change the version number if needed, but it depends on the features you require and the version of Docker Engine you are using. For example, you can use version 3.7 by changing the first line to:\nversion: \u0026#39;3.7\u0026#39; Make sure to check the Docker Compose documentation for the specific features and compatibility of each version.\n","permalink":"http://localhost:1313/install-wordpress-with-docker/","summary":"\u003cp\u003eHere are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.\u003c/p\u003e\n\u003cp\u003eStep 1: Create a Directory for Your Project\u003c/p\u003e\n\u003cp\u003eOpen a terminal and create a directory for your WordPress project:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emkdir wordpress-docker\ncd wordpress-docker\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStep 2: Create a docker-compose.yml file\u003c/p\u003e\n\u003cp\u003eCreate a docker-compose.yml file in the wordpress-docker directory with the following content:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eversion: \u0026#39;3.8\u0026#39;  # Specifies the Docker Compose file format version\n\nservices:\n  wordpress:\n    image: wordpress:latest\n    container_name: wordpress\n    ports:\n      - \u0026#34;8000:80\u0026#34;\n    volumes:\n      - ./html:/var/www/html\n      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    restart: unless-stopped\n\n  db:\n    image: mariadb:latest\n    container_name: wordpress_db\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    restart: unless-stopped\n\nvolumes:\n  db_data:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStep 3: Create the uploads.ini File\u003c/p\u003e","title":"Install Wordpress With Docker"},{"content":"Introduction: Cloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare\u0026rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.\nStep 1: Log in to Cloudflare and Create a Tunnel Configuration\nOpen a web browser and navigate to the Cloudflare website. Log in to your Cloudflare account. Go to the \u0026ldquo;Zero Trust\u0026rdquo; section in the Cloudflare dashboard. Click on \u0026ldquo;Tunnels\u0026rdquo; and then \u0026ldquo;Create Tunnel Configuration.\u0026rdquo; Provide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements. Save the configuration. Step 2: Start the Tunnel Container with Docker\nOpen a terminal or command prompt. Run the following command to start the Cloudflare Zero Trust Tunnel container using host network mode and the Cloudflare Token: sudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token \u0026lt;cloudflare_token\u0026gt; Replace \u0026lt;cloudflare_token\u0026gt; with the Cloudflare Token you generated in Step 1. Example:\nsudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiM2U1Yzg1NWExOWE3MGE3N2YwMzY1ZWNjZDVlMzlhOTgiLCJ0IjoiYTY4OTdmMWQtYjFhOC00MjExLWIxZTQtZmJmOTA3YmRmMGZmIiwicyI6Ik5qUXdNalZrWTJJdFlUZzROQzAwTkRGa0xUZzFPVFV0T0RZek9Ea3lPV1F6WldaaSJ9 Step 3: Validate and Test the Tunnel\nCheck the logs of the Cloudflare Zero Trust Tunnel container to ensure that it started successfully: sudo docker logs cloudflare You should see logs indicating a successful connection to Cloudflare.\nOpen a web browser and visit the URL provided by Cloudflare during the tunnel creation. If the tunnel is functioning correctly, you will see a success message indicating that your tunnel is working. Test accessing your private resources through the tunnel to ensure connectivity and proper functionality. Step 4: Run Cloudflared as a Daemon Service (optional) If you want to run Cloudflare Zero Trust Tunnel as a daemon service, you can use Docker\u0026rsquo;s daemon mode and enable automatic restart. Example:\nsudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiM2U1Yzg1NWExOWE3MGE3N2YwMzY1ZWNjZDVlMzlh ","permalink":"http://localhost:1313/install-cloudflare-zero-trust-with-docker/","summary":"\u003cp\u003eIntroduction:\nCloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare\u0026rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"/images/cloudflare-zero-trust.webp\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eStep 1: Log in to Cloudflare and Create a Tunnel Configuration\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen a web browser and navigate to the Cloudflare website.\u003c/li\u003e\n\u003cli\u003eLog in to your Cloudflare account.\u003c/li\u003e\n\u003cli\u003eGo to the \u0026ldquo;Zero Trust\u0026rdquo; section in the Cloudflare dashboard.\u003c/li\u003e\n\u003cli\u003eClick on \u0026ldquo;Tunnels\u0026rdquo; and then \u0026ldquo;Create Tunnel Configuration.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eProvide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements.\u003c/li\u003e\n\u003cli\u003eSave the configuration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStep 2: Start the Tunnel Container with Docker\u003c/p\u003e","title":"Install Cloudflare Zero Trust With Docker"},{"content":"To install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don\u0026rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.\nOnce you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:\nCreate a new directory for your Jellyfin installation, and navigate to that directory in your terminal. Create a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:\nversion: \u0026#39;3.7\u0026#39; services: jellyfin: image: jellyfin/jellyfin container_name: jellyfin restart: always ports: - 8096:8096 - 8920:8920 volumes: - /path/to/your/config:/config - /path/to/your/media:/media environment: - PUID=1000 - PGID=1000 - TZ=Your/Timezone - UMASK_SET=022 Replace /path/to/your/config and /path/to/your/media with the actual paths on your system where you want to store your Jellyfin configuration and media files, respectively. Replace Your/Timezone with your actual timezone (e.g., \u0026ldquo;America/New_York\u0026rdquo;). Save the docker-compose.yml file and close it. Run the following command to start Jellyfin using Docker Compose:\ndocker-compose up -d This will download the Jellyfin Docker image and start a new Jellyfin container using the configuration specified in your docker-compose.yml file.\nOnce the container is running, you can access the Jellyfin web interface by opening a web browser and navigating to http://localhost:8096. That\u0026rsquo;s it! You should now have a working Jellyfin installation running in a Docker container on your system.\nNote: The above instructions are just a basic example of how to install Jellyfin using Docker Compose. There are many other options and configurations that you can specify in your docker-compose.yml file to customize your Jellyfin installation. For more information, you can refer to the Jellyfin documentation and the Docker Compose documentation.\n","permalink":"http://localhost:1313/posts/2024/install-jellyfin-with-docker-compose/","summary":"\u003cp\u003eTo install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don\u0026rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.\u003c/p\u003e\n\u003cp\u003eOnce you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:\u003c/p\u003e\n\u003cp\u003eCreate a new directory for your Jellyfin installation, and navigate to that directory in your terminal.\nCreate a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:\u003c/p\u003e","title":"Install Jellyfin With Docker Compose"},{"content":"This guide will show how to install Windows updates from Powershell. Make sure the Execution Policies are allowed with this command\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Or\nSet-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force The Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called \u0026ldquo;PSWindowsUpdate\u0026rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.\nTo use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:\nInstall-Module PSWindowsUpdate Run the following command to check for available updates:\nGet-WindowsUpdate If there are updates available, you can install them by running the following command:\nInstall-WindowsUpdate You may be prompted to restart your computer after the updates are installed. If so, run the following command to restart your computer:\nRestart-Computer Once your computer has restarted, you can verify that the updates were installed by running the following command:\nGet-WindowsUpdate | Format-Table You can automate process with this command\nInstall-WindowsUpdate -MicrosoftUpdate -AcceptAll -AutoReboot | Out-File \u0026#34;C:\\($env.computername-Get-Date -f yyyy-MM-dd)-MSUpdates.log\u0026#34; -Force ","permalink":"http://localhost:1313/posts/2024/install-windows-update-from-powershell/","summary":"\u003cp\u003eThis guide will show how to install Windows updates from Powershell.\nMake sure the Execution Policies are allowed with this command\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSet-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called \u0026ldquo;PSWindowsUpdate\u0026rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.\u003c/p\u003e\n\u003cp\u003eTo use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:\u003c/p\u003e","title":"Install Windows Update From Powershell"},{"content":"Enabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Here’s how you can set it up:\nBackup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.\nEdit wp-config.php:\nOpen your wp-config.php file. Add the following line above the /* That\u0026rsquo;s all, stop editing! Happy publishing. */ line:\ndefine(\u0026#39;WP_ALLOW_MULTISITE\u0026#39;, true); Access Network Setup:\nLog in to your WordPress dashboard. Go to Tools \u0026gt; Network Setup. Choose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1). Click Install. Update wp-config.php and .htaccess:\nWordPress will provide some code to add to your wp-config.php and .htaccess files. Follow the instructions provided. Add the provided code to your wp-config.php file:\ndefine(\u0026#39;MULTISITE\u0026#39;, true); define(\u0026#39;SUBDOMAIN_INSTALL\u0026#39;, false); // Set to true if using subdomains define(\u0026#39;DOMAIN_CURRENT_SITE\u0026#39;, \u0026#39;example.com\u0026#39;); define(\u0026#39;PATH_CURRENT_SITE\u0026#39;, \u0026#39;/\u0026#39;); define(\u0026#39;SITE_ID_CURRENT_SITE\u0026#39;, 1); define(\u0026#39;BLOG_ID_CURRENT_SITE\u0026#39;, 1); Update your .htaccess file with the provided rewrite rules.\nRewriteEngine On RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteBase / RewriteRule ^index\\.php$ - [L] # add a trailing slash to /wp-admin RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L] RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^ - [L] RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L] RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\\.php)$ $2 [L] RewriteRule . index.php [L] Log out and log back in to your WordPress dashboard. Network Admin Settings:\nYou’ll now see a new My Sites menu in the admin bar. Go to My Sites \u0026gt; Network Admin \u0026gt; Dashboard to manage your network settings.\nConfigure Network Settings:\nFrom the Network Admin dashboard, you can add new sites, install themes and plugins, and manage your network settings.\n","permalink":"http://localhost:1313/posts/2025/wordpress-multisites/","summary":"\u003cp\u003eEnabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Here’s how you can set it up:\u003c/p\u003e\n\u003cp\u003eBackup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEdit wp-config.php:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOpen your wp-config.php file.\nAdd the following line above the /* That\u0026rsquo;s all, stop editing! Happy publishing. */ line:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edefine(\u0026#39;WP_ALLOW_MULTISITE\u0026#39;, true);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eAccess Network Setup:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLog in to your WordPress dashboard.\u003c/li\u003e\n\u003cli\u003eGo to Tools \u0026gt; Network Setup.\u003c/li\u003e\n\u003cli\u003eChoose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1).\u003c/li\u003e\n\u003cli\u003eClick Install.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate wp-config.php and .htaccess:\u003c/strong\u003e\u003c/p\u003e","title":"Wordpress Multisites"},{"content":"You can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:\nAccess your Docker container:\ndocker exec -it \u0026lt;container_name\u0026gt; bash Navigate to your WordPress directory:\ncd /var/www/html List the users:\nwp user list Update the password for the desired user:\nwp user update \u0026lt;user_id\u0026gt; --user_pass=\u0026lt;new_password\u0026gt; Exit the container:\nexit In case there is an error like wp command not found, WP-CLI isn\u0026rsquo;t installed in your Docker container. Let\u0026rsquo;s install it:\nDownload WP-CLI:\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar Make the file executable:\nchmod +x wp-cli.phar Move it to a directory in your PATH:\nsudo mv wp-cli.phar /usr/local/bin/wp Verify the installation:\nwp --info If you prefer to use Docker Compose, you can add WP-CLI to your docker-compose.yml file:\nversion: \u0026#39;3.8\u0026#39; services: wordpress: image: wordpress:latest ports: - \u0026#34;8000:80\u0026#34; environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: exampleuser WORDPRESS_DB_PASSWORD: examplepass WORDPRESS_DB_NAME: exampledb db: image: mysql:5.7 environment: MYSQL_ROOT_PASSWORD: examplepass MYSQL_DATABASE: exampledb MYSQL_USER: exampleuser MYSQL_PASSWORD: examplepass wpcli: image: wordpress:cli volumes: - .:/var/www/html depends_on: - wordpress After updating your docker-compose.yml, you can run WP-CLI commands like this:\ndocker-compose run --rm wpcli wp \u0026lt;command\u0026gt; This should help you get WP-CLI up and running in your Docker environment.\n","permalink":"http://localhost:1313/posts/2025/reset-wordpress-password/","summary":"\u003cp\u003eYou can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:\u003c/p\u003e\n\u003cp\u003eAccess your Docker container:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edocker exec -it \u0026lt;container_name\u0026gt; bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNavigate to your WordPress directory:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd /var/www/html\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eList the users:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewp user list\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUpdate the password for the desired user:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewp user update \u0026lt;user_id\u0026gt; --user_pass=\u0026lt;new_password\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eExit the container:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexit\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn case there is an error like \u003ccode\u003ewp command not found\u003c/code\u003e, WP-CLI isn\u0026rsquo;t installed in your Docker container. Let\u0026rsquo;s install it:\u003c/p\u003e","title":"Reset Wordpress Password"},{"content":"Here\u0026rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.\nAdvantages of Hosting on Cloudflare\nPerformance: Cloudflare\u0026rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world. Security: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates. Reliability: Cloudflare\u0026rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down. Why Static Websites are Better than Dynamic\nSpeed: Static websites load faster because they serve pre-built HTML files, unlike dynamic websites that generate content on the fly. Security: Static sites are less vulnerable to attacks since they don\u0026rsquo;t rely on server-side processing. Cost-Effective: Hosting static sites is generally cheaper as they require less server resources. Introduction to Hugo\nHugo is a fast and flexible static site generator written in Go. It allows you to create static websites quickly and efficiently, using Markdown for content and a variety of themes for design.\nStep-by-Step Guide Install Hugo\nWindows: Use Chocolatey: choco install hugo-extended macOS: Use Homebrew: brew install hugo Linux: Use your package manager, e.g., sudo apt-get install hugo for Ubuntu. Set Up Git and Sync Content Install Git:\nWindows: Download and install from Git for Windows. macOS: Install via Homebrew: brew install git. Linux: Use your package manager, e.g., sudo apt-get install git for Ubuntu. Configure Git:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; Initialize a Git Repository:\ncd your-hugo-site git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git remote add origin https://github.com/yourusername/your-repo.git git push -u origin master Set Up Cloudflare to Work with Hugo Create a Cloudflare Account: Sign up at Cloudflare.\nAdd Your Site to Cloudflare:\nGo to the Cloudflare dashboard and add your site. Update your domain\u0026rsquo;s nameservers to point to Cloudflare\u0026rsquo;s nameservers. Deploy Hugo Site to Cloudflare Pages:\nGo to the Pages section in Cloudflare. Click \u0026ldquo;Create a project\u0026rdquo; and connect your GitHub repository. Configure the build settings: set the build command to hugo and the output directory to public. Use a Custom Domain Add Custom Domain in Cloudflare:\nIn the Cloudflare Pages dashboard, go to your project settings and add your custom domain. Update your DNS settings to point your custom domain to the Cloudflare Pages domain. Configure SSL/TLS:\nCloudflare provides SSL/TLS encryption by default. You can configure SSL settings in the Cloudflare dashboard under the SSL/TLS tab. Conclusion\nBy following these steps, you\u0026rsquo;ll have a fast, secure, and reliable static website hosted on Cloudflare using Hugo. This setup leverages the advantages of static sites and Cloudflare\u0026rsquo;s robust features to ensure optimal performance and security.\n","permalink":"http://localhost:1313/posts/2025/static-website-with-hugo-and-cloudflare/","summary":"\u003cp\u003eHere\u0026rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages of Hosting on Cloudflare\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePerformance: Cloudflare\u0026rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world.\u003c/li\u003e\n\u003cli\u003eSecurity: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates.\u003c/li\u003e\n\u003cli\u003eReliability: Cloudflare\u0026rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWhy Static Websites are Better than Dynamic\u003c/strong\u003e\u003c/p\u003e","title":"Static Website With Hugo and Cloudflare"},{"content":"Here are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.\nStep 1: Create a Directory for Your Project\nOpen a terminal and create a directory for your WordPress project:\nmkdir wordpress-docker cd wordpress-docker Step 2: Create a docker-compose.yml file\nCreate a docker-compose.yml file in the wordpress-docker directory with the following content:\nversion: \u0026#39;3.8\u0026#39; # Specifies the Docker Compose file format version services: wordpress: image: wordpress:latest container_name: wordpress ports: - \u0026#34;8000:80\u0026#34; volumes: - ./html:/var/www/html - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress restart: unless-stopped db: image: mariadb:latest container_name: wordpress_db volumes: - db_data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress restart: unless-stopped volumes: db_data: Step 3: Create the uploads.ini File\nCreate an uploads.ini file in the wordpress-docker directory with the following content:\nfile_uploads = On memory_limit = 64M upload_max_filesize = 64M post_max_size = 64M max_execution_time = 600 Step 4: Start the Docker Containers\nRun the following command to start the Docker containers:\ndocker-compose up -d Step 5: Access Your WordPress Site\nOpen your web browser and navigate to http://localhost:8000 to complete the WordPress installation.\nStep 6: Backup Your Files\nEnsure that your WordPress files are backed up by mapping the ./html directory to /var/www/html in the Docker container. This way, all your WordPress files will be stored in the html directory on your host machine.\nExplanation of version: \u0026lsquo;3.8\u0026rsquo;\nCompatibility: Version 3.8 is compatible with Docker Engine 19.03.0 and above. Features: It includes features like support for secrets, configs, and improved networking options. You can change the version number if needed, but it depends on the features you require and the version of Docker Engine you are using. For example, you can use version 3.7 by changing the first line to:\nversion: \u0026#39;3.7\u0026#39; Make sure to check the Docker Compose documentation for the specific features and compatibility of each version.\n","permalink":"http://localhost:1313/install-wordpress-with-docker/","summary":"\u003cp\u003eHere are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.\u003c/p\u003e\n\u003cp\u003eStep 1: Create a Directory for Your Project\u003c/p\u003e\n\u003cp\u003eOpen a terminal and create a directory for your WordPress project:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emkdir wordpress-docker\ncd wordpress-docker\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStep 2: Create a docker-compose.yml file\u003c/p\u003e\n\u003cp\u003eCreate a docker-compose.yml file in the wordpress-docker directory with the following content:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eversion: \u0026#39;3.8\u0026#39;  # Specifies the Docker Compose file format version\n\nservices:\n  wordpress:\n    image: wordpress:latest\n    container_name: wordpress\n    ports:\n      - \u0026#34;8000:80\u0026#34;\n    volumes:\n      - ./html:/var/www/html\n      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    restart: unless-stopped\n\n  db:\n    image: mariadb:latest\n    container_name: wordpress_db\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    restart: unless-stopped\n\nvolumes:\n  db_data:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStep 3: Create the uploads.ini File\u003c/p\u003e","title":"Install Wordpress With Docker"},{"content":"Introduction: Cloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare\u0026rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.\nStep 1: Log in to Cloudflare and Create a Tunnel Configuration\nOpen a web browser and navigate to the Cloudflare website. Log in to your Cloudflare account. Go to the \u0026ldquo;Zero Trust\u0026rdquo; section in the Cloudflare dashboard. Click on \u0026ldquo;Tunnels\u0026rdquo; and then \u0026ldquo;Create Tunnel Configuration.\u0026rdquo; Provide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements. Save the configuration. Step 2: Start the Tunnel Container with Docker\nOpen a terminal or command prompt. Run the following command to start the Cloudflare Zero Trust Tunnel container using host network mode and the Cloudflare Token: sudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token \u0026lt;cloudflare_token\u0026gt; Replace \u0026lt;cloudflare_token\u0026gt; with the Cloudflare Token you generated in Step 1. Example:\nsudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiM2U1Yzg1NWExOWE3MGE3N2YwMzY1ZWNjZDVlMzlhOTgiLCJ0IjoiYTY4OTdmMWQtYjFhOC00MjExLWIxZTQtZmJmOTA3YmRmMGZmIiwicyI6Ik5qUXdNalZrWTJJdFlUZzROQzAwTkRGa0xUZzFPVFV0T0RZek9Ea3lPV1F6WldaaSJ9 Step 3: Validate and Test the Tunnel\nCheck the logs of the Cloudflare Zero Trust Tunnel container to ensure that it started successfully: sudo docker logs cloudflare You should see logs indicating a successful connection to Cloudflare.\nOpen a web browser and visit the URL provided by Cloudflare during the tunnel creation. If the tunnel is functioning correctly, you will see a success message indicating that your tunnel is working. Test accessing your private resources through the tunnel to ensure connectivity and proper functionality. Step 4: Run Cloudflared as a Daemon Service (optional) If you want to run Cloudflare Zero Trust Tunnel as a daemon service, you can use Docker\u0026rsquo;s daemon mode and enable automatic restart. Example:\nsudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiM2U1Yzg1NWExOWE3MGE3N2YwMzY1ZWNjZDVlMzlh ","permalink":"http://localhost:1313/install-cloudflare-zero-trust-with-docker/","summary":"\u003cp\u003eIntroduction:\nCloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare\u0026rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"/images/cloudflare-zero-trust.webp\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eStep 1: Log in to Cloudflare and Create a Tunnel Configuration\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen a web browser and navigate to the Cloudflare website.\u003c/li\u003e\n\u003cli\u003eLog in to your Cloudflare account.\u003c/li\u003e\n\u003cli\u003eGo to the \u0026ldquo;Zero Trust\u0026rdquo; section in the Cloudflare dashboard.\u003c/li\u003e\n\u003cli\u003eClick on \u0026ldquo;Tunnels\u0026rdquo; and then \u0026ldquo;Create Tunnel Configuration.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eProvide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements.\u003c/li\u003e\n\u003cli\u003eSave the configuration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStep 2: Start the Tunnel Container with Docker\u003c/p\u003e","title":"Install Cloudflare Zero Trust With Docker"},{"content":"To install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don\u0026rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.\nOnce you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:\nCreate a new directory for your Jellyfin installation, and navigate to that directory in your terminal. Create a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:\nversion: \u0026#39;3.7\u0026#39; services: jellyfin: image: jellyfin/jellyfin container_name: jellyfin restart: always ports: - 8096:8096 - 8920:8920 volumes: - /path/to/your/config:/config - /path/to/your/media:/media environment: - PUID=1000 - PGID=1000 - TZ=Your/Timezone - UMASK_SET=022 Replace /path/to/your/config and /path/to/your/media with the actual paths on your system where you want to store your Jellyfin configuration and media files, respectively. Replace Your/Timezone with your actual timezone (e.g., \u0026ldquo;America/New_York\u0026rdquo;). Save the docker-compose.yml file and close it. Run the following command to start Jellyfin using Docker Compose:\ndocker-compose up -d This will download the Jellyfin Docker image and start a new Jellyfin container using the configuration specified in your docker-compose.yml file.\nOnce the container is running, you can access the Jellyfin web interface by opening a web browser and navigating to http://localhost:8096. That\u0026rsquo;s it! You should now have a working Jellyfin installation running in a Docker container on your system.\nNote: The above instructions are just a basic example of how to install Jellyfin using Docker Compose. There are many other options and configurations that you can specify in your docker-compose.yml file to customize your Jellyfin installation. For more information, you can refer to the Jellyfin documentation and the Docker Compose documentation.\n","permalink":"http://localhost:1313/posts/2024/install-jellyfin-with-docker-compose/","summary":"\u003cp\u003eTo install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don\u0026rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.\u003c/p\u003e\n\u003cp\u003eOnce you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:\u003c/p\u003e\n\u003cp\u003eCreate a new directory for your Jellyfin installation, and navigate to that directory in your terminal.\nCreate a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:\u003c/p\u003e","title":"Install Jellyfin With Docker Compose"},{"content":"This guide will show how to install Windows updates from Powershell. Make sure the Execution Policies are allowed with this command\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Or\nSet-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force The Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called \u0026ldquo;PSWindowsUpdate\u0026rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.\nTo use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:\nInstall-Module PSWindowsUpdate Run the following command to check for available updates:\nGet-WindowsUpdate If there are updates available, you can install them by running the following command:\nInstall-WindowsUpdate You may be prompted to restart your computer after the updates are installed. If so, run the following command to restart your computer:\nRestart-Computer Once your computer has restarted, you can verify that the updates were installed by running the following command:\nGet-WindowsUpdate | Format-Table You can automate process with this command\nInstall-WindowsUpdate -MicrosoftUpdate -AcceptAll -AutoReboot | Out-File \u0026#34;C:\\($env.computername-Get-Date -f yyyy-MM-dd)-MSUpdates.log\u0026#34; -Force ","permalink":"http://localhost:1313/posts/2024/install-windows-update-from-powershell/","summary":"\u003cp\u003eThis guide will show how to install Windows updates from Powershell.\nMake sure the Execution Policies are allowed with this command\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSet-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called \u0026ldquo;PSWindowsUpdate\u0026rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.\u003c/p\u003e\n\u003cp\u003eTo use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:\u003c/p\u003e","title":"Install Windows Update From Powershell"},{"content":"Enabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Here’s how you can set it up:\nBackup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.\nEdit wp-config.php:\nOpen your wp-config.php file. Add the following line above the /* That\u0026rsquo;s all, stop editing! Happy publishing. */ line:\ndefine(\u0026#39;WP_ALLOW_MULTISITE\u0026#39;, true); Access Network Setup:\nLog in to your WordPress dashboard. Go to Tools \u0026gt; Network Setup. Choose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1). Click Install. Update wp-config.php and .htaccess:\nWordPress will provide some code to add to your wp-config.php and .htaccess files. Follow the instructions provided. Add the provided code to your wp-config.php file:\ndefine(\u0026#39;MULTISITE\u0026#39;, true); define(\u0026#39;SUBDOMAIN_INSTALL\u0026#39;, false); // Set to true if using subdomains define(\u0026#39;DOMAIN_CURRENT_SITE\u0026#39;, \u0026#39;example.com\u0026#39;); define(\u0026#39;PATH_CURRENT_SITE\u0026#39;, \u0026#39;/\u0026#39;); define(\u0026#39;SITE_ID_CURRENT_SITE\u0026#39;, 1); define(\u0026#39;BLOG_ID_CURRENT_SITE\u0026#39;, 1); Update your .htaccess file with the provided rewrite rules.\nRewriteEngine On RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}] RewriteBase / RewriteRule ^index\\.php$ - [L] # add a trailing slash to /wp-admin RewriteRule ^([_0-9a-zA-Z-]+/)?wp-admin$ $1wp-admin/ [R=301,L] RewriteCond %{REQUEST_FILENAME} -f [OR] RewriteCond %{REQUEST_FILENAME} -d RewriteRule ^ - [L] RewriteRule ^([_0-9a-zA-Z-]+/)?(wp-(content|admin|includes).*) $2 [L] RewriteRule ^([_0-9a-zA-Z-]+/)?(.*\\.php)$ $2 [L] RewriteRule . index.php [L] Log out and log back in to your WordPress dashboard. Network Admin Settings:\nYou’ll now see a new My Sites menu in the admin bar. Go to My Sites \u0026gt; Network Admin \u0026gt; Dashboard to manage your network settings.\nConfigure Network Settings:\nFrom the Network Admin dashboard, you can add new sites, install themes and plugins, and manage your network settings.\n","permalink":"http://localhost:1313/posts/2025/wordpress-multisites/","summary":"\u003cp\u003eEnabling WordPress Multisite allows you to manage multiple sites from a single WordPress installation. Here’s how you can set it up:\u003c/p\u003e\n\u003cp\u003eBackup Your Site: Before making any changes, ensure you have a complete backup of your WordPress site.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eEdit wp-config.php:\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eOpen your wp-config.php file.\nAdd the following line above the /* That\u0026rsquo;s all, stop editing! Happy publishing. */ line:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edefine(\u0026#39;WP_ALLOW_MULTISITE\u0026#39;, true);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cstrong\u003eAccess Network Setup:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLog in to your WordPress dashboard.\u003c/li\u003e\n\u003cli\u003eGo to Tools \u0026gt; Network Setup.\u003c/li\u003e\n\u003cli\u003eChoose whether you want to use subdomains (e.g., site1.example.com) or subdirectories (e.g., example.com/site1).\u003c/li\u003e\n\u003cli\u003eClick Install.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eUpdate wp-config.php and .htaccess:\u003c/strong\u003e\u003c/p\u003e","title":"Wordpress Multisites"},{"content":"You can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:\nAccess your Docker container:\ndocker exec -it \u0026lt;container_name\u0026gt; bash Navigate to your WordPress directory:\ncd /var/www/html List the users:\nwp user list Update the password for the desired user:\nwp user update \u0026lt;user_id\u0026gt; --user_pass=\u0026lt;new_password\u0026gt; Exit the container:\nexit In case there is an error like wp command not found, WP-CLI isn\u0026rsquo;t installed in your Docker container. Let\u0026rsquo;s install it:\nDownload WP-CLI:\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar Make the file executable:\nchmod +x wp-cli.phar Move it to a directory in your PATH:\nsudo mv wp-cli.phar /usr/local/bin/wp Verify the installation:\nwp --info If you prefer to use Docker Compose, you can add WP-CLI to your docker-compose.yml file:\nversion: \u0026#39;3.8\u0026#39; services: wordpress: image: wordpress:latest ports: - \u0026#34;8000:80\u0026#34; environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: exampleuser WORDPRESS_DB_PASSWORD: examplepass WORDPRESS_DB_NAME: exampledb db: image: mysql:5.7 environment: MYSQL_ROOT_PASSWORD: examplepass MYSQL_DATABASE: exampledb MYSQL_USER: exampleuser MYSQL_PASSWORD: examplepass wpcli: image: wordpress:cli volumes: - .:/var/www/html depends_on: - wordpress After updating your docker-compose.yml, you can run WP-CLI commands like this:\ndocker-compose run --rm wpcli wp \u0026lt;command\u0026gt; This should help you get WP-CLI up and running in your Docker environment.\n","permalink":"http://localhost:1313/posts/2025/reset-wordpress-password/","summary":"\u003cp\u003eYou can reset your WordPress admin password in a Docker environment using WP-CLI. Here are the steps:\u003c/p\u003e\n\u003cp\u003eAccess your Docker container:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edocker exec -it \u0026lt;container_name\u0026gt; bash\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eNavigate to your WordPress directory:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecd /var/www/html\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eList the users:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewp user list\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eUpdate the password for the desired user:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ewp user update \u0026lt;user_id\u0026gt; --user_pass=\u0026lt;new_password\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eExit the container:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eexit\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIn case there is an error like \u003ccode\u003ewp command not found\u003c/code\u003e, WP-CLI isn\u0026rsquo;t installed in your Docker container. Let\u0026rsquo;s install it:\u003c/p\u003e","title":"Reset Wordpress Password"},{"content":"Here\u0026rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.\nAdvantages of Hosting on Cloudflare\nPerformance: Cloudflare\u0026rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world. Security: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates. Reliability: Cloudflare\u0026rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down. Why Static Websites are Better than Dynamic\nSpeed: Static websites load faster because they serve pre-built HTML files, unlike dynamic websites that generate content on the fly. Security: Static sites are less vulnerable to attacks since they don\u0026rsquo;t rely on server-side processing. Cost-Effective: Hosting static sites is generally cheaper as they require less server resources. Introduction to Hugo\nHugo is a fast and flexible static site generator written in Go. It allows you to create static websites quickly and efficiently, using Markdown for content and a variety of themes for design.\nStep-by-Step Guide Install Hugo\nWindows: Use Chocolatey: choco install hugo-extended macOS: Use Homebrew: brew install hugo Linux: Use your package manager, e.g., sudo apt-get install hugo for Ubuntu. Set Up Git and Sync Content Install Git:\nWindows: Download and install from Git for Windows. macOS: Install via Homebrew: brew install git. Linux: Use your package manager, e.g., sudo apt-get install git for Ubuntu. Configure Git:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your.email@example.com\u0026#34; Initialize a Git Repository:\ncd your-hugo-site git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git remote add origin https://github.com/yourusername/your-repo.git git push -u origin master Set Up Cloudflare to Work with Hugo Create a Cloudflare Account: Sign up at Cloudflare.\nAdd Your Site to Cloudflare:\nGo to the Cloudflare dashboard and add your site. Update your domain\u0026rsquo;s nameservers to point to Cloudflare\u0026rsquo;s nameservers. Deploy Hugo Site to Cloudflare Pages:\nGo to the Pages section in Cloudflare. Click \u0026ldquo;Create a project\u0026rdquo; and connect your GitHub repository. Configure the build settings: set the build command to hugo and the output directory to public. Use a Custom Domain Add Custom Domain in Cloudflare:\nIn the Cloudflare Pages dashboard, go to your project settings and add your custom domain. Update your DNS settings to point your custom domain to the Cloudflare Pages domain. Configure SSL/TLS:\nCloudflare provides SSL/TLS encryption by default. You can configure SSL settings in the Cloudflare dashboard under the SSL/TLS tab. Conclusion\nBy following these steps, you\u0026rsquo;ll have a fast, secure, and reliable static website hosted on Cloudflare using Hugo. This setup leverages the advantages of static sites and Cloudflare\u0026rsquo;s robust features to ensure optimal performance and security.\n","permalink":"http://localhost:1313/posts/2025/static-website-with-hugo-and-cloudflare/","summary":"\u003cp\u003eHere\u0026rsquo;s a comprehensive guide on how to install Hugo, set up Git, and host a static website with Cloudflare, including the advantages of using Cloudflare and static websites.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eAdvantages of Hosting on Cloudflare\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePerformance: Cloudflare\u0026rsquo;s global Content Delivery Network (CDN) ensures your website loads quickly from anywhere in the world.\u003c/li\u003e\n\u003cli\u003eSecurity: Cloudflare provides robust security features, including DDoS protection, a Web Application Firewall (WAF), and free SSL certificates.\u003c/li\u003e\n\u003cli\u003eReliability: Cloudflare\u0026rsquo;s Always Online feature keeps a cached version of your site available even if your server goes down.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eWhy Static Websites are Better than Dynamic\u003c/strong\u003e\u003c/p\u003e","title":"Static Website With Hugo and Cloudflare"},{"content":"Here are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.\nStep 1: Create a Directory for Your Project\nOpen a terminal and create a directory for your WordPress project:\nmkdir wordpress-docker cd wordpress-docker Step 2: Create a docker-compose.yml file\nCreate a docker-compose.yml file in the wordpress-docker directory with the following content:\nversion: \u0026#39;3.8\u0026#39; # Specifies the Docker Compose file format version services: wordpress: image: wordpress:latest container_name: wordpress ports: - \u0026#34;8000:80\u0026#34; volumes: - ./html:/var/www/html - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini environment: WORDPRESS_DB_HOST: db WORDPRESS_DB_USER: wordpress WORDPRESS_DB_PASSWORD: wordpress WORDPRESS_DB_NAME: wordpress restart: unless-stopped db: image: mariadb:latest container_name: wordpress_db volumes: - db_data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: somewordpress MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress restart: unless-stopped volumes: db_data: Step 3: Create the uploads.ini File\nCreate an uploads.ini file in the wordpress-docker directory with the following content:\nfile_uploads = On memory_limit = 64M upload_max_filesize = 64M post_max_size = 64M max_execution_time = 600 Step 4: Start the Docker Containers\nRun the following command to start the Docker containers:\ndocker-compose up -d Step 5: Access Your WordPress Site\nOpen your web browser and navigate to http://localhost:8000 to complete the WordPress installation.\nStep 6: Backup Your Files\nEnsure that your WordPress files are backed up by mapping the ./html directory to /var/www/html in the Docker container. This way, all your WordPress files will be stored in the html directory on your host machine.\nExplanation of version: \u0026lsquo;3.8\u0026rsquo;\nCompatibility: Version 3.8 is compatible with Docker Engine 19.03.0 and above. Features: It includes features like support for secrets, configs, and improved networking options. You can change the version number if needed, but it depends on the features you require and the version of Docker Engine you are using. For example, you can use version 3.7 by changing the first line to:\nversion: \u0026#39;3.7\u0026#39; Make sure to check the Docker Compose documentation for the specific features and compatibility of each version.\n","permalink":"http://localhost:1313/install-wordpress-with-docker/","summary":"\u003cp\u003eHere are the steps to install WordPress under Docker, including setting up a directory for file backups and adding an uploads.ini file to customize PHP settings.\u003c/p\u003e\n\u003cp\u003eStep 1: Create a Directory for Your Project\u003c/p\u003e\n\u003cp\u003eOpen a terminal and create a directory for your WordPress project:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emkdir wordpress-docker\ncd wordpress-docker\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStep 2: Create a docker-compose.yml file\u003c/p\u003e\n\u003cp\u003eCreate a docker-compose.yml file in the wordpress-docker directory with the following content:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eversion: \u0026#39;3.8\u0026#39;  # Specifies the Docker Compose file format version\n\nservices:\n  wordpress:\n    image: wordpress:latest\n    container_name: wordpress\n    ports:\n      - \u0026#34;8000:80\u0026#34;\n    volumes:\n      - ./html:/var/www/html\n      - ./uploads.ini:/usr/local/etc/php/conf.d/uploads.ini\n    environment:\n      WORDPRESS_DB_HOST: db\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    restart: unless-stopped\n\n  db:\n    image: mariadb:latest\n    container_name: wordpress_db\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n    restart: unless-stopped\n\nvolumes:\n  db_data:\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eStep 3: Create the uploads.ini File\u003c/p\u003e","title":"Install Wordpress With Docker"},{"content":"Introduction: Cloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare\u0026rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.\nStep 1: Log in to Cloudflare and Create a Tunnel Configuration\nOpen a web browser and navigate to the Cloudflare website. Log in to your Cloudflare account. Go to the \u0026ldquo;Zero Trust\u0026rdquo; section in the Cloudflare dashboard. Click on \u0026ldquo;Tunnels\u0026rdquo; and then \u0026ldquo;Create Tunnel Configuration.\u0026rdquo; Provide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements. Save the configuration. Step 2: Start the Tunnel Container with Docker\nOpen a terminal or command prompt. Run the following command to start the Cloudflare Zero Trust Tunnel container using host network mode and the Cloudflare Token: sudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token \u0026lt;cloudflare_token\u0026gt; Replace \u0026lt;cloudflare_token\u0026gt; with the Cloudflare Token you generated in Step 1. Example:\nsudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiM2U1Yzg1NWExOWE3MGE3N2YwMzY1ZWNjZDVlMzlhOTgiLCJ0IjoiYTY4OTdmMWQtYjFhOC00MjExLWIxZTQtZmJmOTA3YmRmMGZmIiwicyI6Ik5qUXdNalZrWTJJdFlUZzROQzAwTkRGa0xUZzFPVFV0T0RZek9Ea3lPV1F6WldaaSJ9 Step 3: Validate and Test the Tunnel\nCheck the logs of the Cloudflare Zero Trust Tunnel container to ensure that it started successfully: sudo docker logs cloudflare You should see logs indicating a successful connection to Cloudflare.\nOpen a web browser and visit the URL provided by Cloudflare during the tunnel creation. If the tunnel is functioning correctly, you will see a success message indicating that your tunnel is working. Test accessing your private resources through the tunnel to ensure connectivity and proper functionality. Step 4: Run Cloudflared as a Daemon Service (optional) If you want to run Cloudflare Zero Trust Tunnel as a daemon service, you can use Docker\u0026rsquo;s daemon mode and enable automatic restart. Example:\nsudo docker run -d --name cloudflare --restart unless-stopped --network host cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiM2U1Yzg1NWExOWE3MGE3N2YwMzY1ZWNjZDVlMzlh ","permalink":"http://localhost:1313/install-cloudflare-zero-trust-with-docker/","summary":"\u003cp\u003eIntroduction:\nCloudflare Zero Trust Tunnel is a secure solution that enables you to connect your private infrastructure to Cloudflare\u0026rsquo;s network without exposing it to the public internet. This manual will guide you through the installation process of Cloudflare Zero Trust Tunnel using Docker with host network mode and a Cloudflare Token for authentication.\u003c/p\u003e\n\u003cfigure\u003e\n    \u003cimg loading=\"lazy\" src=\"/images/cloudflare-zero-trust.webp\"/\u003e \n\u003c/figure\u003e\n\n\u003cp\u003eStep 1: Log in to Cloudflare and Create a Tunnel Configuration\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOpen a web browser and navigate to the Cloudflare website.\u003c/li\u003e\n\u003cli\u003eLog in to your Cloudflare account.\u003c/li\u003e\n\u003cli\u003eGo to the \u0026ldquo;Zero Trust\u0026rdquo; section in the Cloudflare dashboard.\u003c/li\u003e\n\u003cli\u003eClick on \u0026ldquo;Tunnels\u0026rdquo; and then \u0026ldquo;Create Tunnel Configuration.\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eProvide a name for your configuration, select the data centers you want to use, and configure other settings as per your requirements.\u003c/li\u003e\n\u003cli\u003eSave the configuration.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eStep 2: Start the Tunnel Container with Docker\u003c/p\u003e","title":"Install Cloudflare Zero Trust With Docker"},{"content":"To install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don\u0026rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.\nOnce you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:\nCreate a new directory for your Jellyfin installation, and navigate to that directory in your terminal. Create a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:\nversion: \u0026#39;3.7\u0026#39; services: jellyfin: image: jellyfin/jellyfin container_name: jellyfin restart: always ports: - 8096:8096 - 8920:8920 volumes: - /path/to/your/config:/config - /path/to/your/media:/media environment: - PUID=1000 - PGID=1000 - TZ=Your/Timezone - UMASK_SET=022 Replace /path/to/your/config and /path/to/your/media with the actual paths on your system where you want to store your Jellyfin configuration and media files, respectively. Replace Your/Timezone with your actual timezone (e.g., \u0026ldquo;America/New_York\u0026rdquo;). Save the docker-compose.yml file and close it. Run the following command to start Jellyfin using Docker Compose:\ndocker-compose up -d This will download the Jellyfin Docker image and start a new Jellyfin container using the configuration specified in your docker-compose.yml file.\nOnce the container is running, you can access the Jellyfin web interface by opening a web browser and navigating to http://localhost:8096. That\u0026rsquo;s it! You should now have a working Jellyfin installation running in a Docker container on your system.\nNote: The above instructions are just a basic example of how to install Jellyfin using Docker Compose. There are many other options and configurations that you can specify in your docker-compose.yml file to customize your Jellyfin installation. For more information, you can refer to the Jellyfin documentation and the Docker Compose documentation.\n","permalink":"http://localhost:1313/posts/2024/install-jellyfin-with-docker-compose/","summary":"\u003cp\u003eTo install Jellyfin using Docker Compose, you will need to have Docker and Docker Compose installed on your system. If you don\u0026rsquo;t already have these tools installed, you can follow the instructions provided by Docker to install them on your system.\u003c/p\u003e\n\u003cp\u003eOnce you have Docker and Docker Compose installed, you can use the following steps to install Jellyfin using Docker Compose:\u003c/p\u003e\n\u003cp\u003eCreate a new directory for your Jellyfin installation, and navigate to that directory in your terminal.\nCreate a new file called docker-compose.yml in your Jellyfin directory, and add the following contents to the file:\u003c/p\u003e","title":"Install Jellyfin With Docker Compose"},{"content":"This guide will show how to install Windows updates from Powershell. Make sure the Execution Policies are allowed with this command\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Or\nSet-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force The Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called \u0026ldquo;PSWindowsUpdate\u0026rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.\nTo use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:\nInstall-Module PSWindowsUpdate Run the following command to check for available updates:\nGet-WindowsUpdate If there are updates available, you can install them by running the following command:\nInstall-WindowsUpdate You may be prompted to restart your computer after the updates are installed. If so, run the following command to restart your computer:\nRestart-Computer Once your computer has restarted, you can verify that the updates were installed by running the following command:\nGet-WindowsUpdate | Format-Table You can automate process with this command\nInstall-WindowsUpdate -MicrosoftUpdate -AcceptAll -AutoReboot | Out-File \u0026#34;C:\\($env.computername-Get-Date -f yyyy-MM-dd)-MSUpdates.log\u0026#34; -Force ","permalink":"http://localhost:1313/posts/2024/install-windows-update-from-powershell/","summary":"\u003cp\u003eThis guide will show how to install Windows updates from Powershell.\nMake sure the Execution Policies are allowed with this command\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eOr\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSet-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eThe Get-WindowsUpdate command is not a native PowerShell command, but rather it is part of a PowerShell module called \u0026ldquo;PSWindowsUpdate\u0026rdquo;. This module provides cmdlets that allow you to manage Windows updates from the PowerShell command line.\u003c/p\u003e\n\u003cp\u003eTo use the Get-WindowsUpdate cmdlet, you will need to first install the PSWindowsUpdate module on your system. To do this, you can run the following command:\u003c/p\u003e","title":"Install Windows Update From Powershell"}]